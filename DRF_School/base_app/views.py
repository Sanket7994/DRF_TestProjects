from django.shortcuts import render
from rest_framework import permissions
from rest_framework import status
from rest_framework.response import Response
from rest_framework.views import APIView
from rest_framework_simplejwt.serializers import TokenObtainPairSerializer
from rest_framework_simplejwt.views import TokenObtainPairView
from rest_framework_simplejwt.token_blacklist.models import OutstandingToken, BlacklistedToken
from .models import School, Student, CustomUser
from .serializer import SchoolSerializer, StudentSerializer
from django.contrib.auth import authenticate
from rest_framework_simplejwt.tokens import AccessToken, RefreshToken



class PingView(APIView):
    permission_classes = [permissions.IsAuthenticated]
    
    def get(self, request):
        return Response(data={"user": request.user.email, "message": "Server is running"})


# customizing the claims in tokens generated by the TokenObtainPairView
class MyTokenObtainPairSerializer(TokenObtainPairSerializer):
    @classmethod
    def get_token(cls, user):
        token = super().get_token(user)

        # Adding custom claims
        token['email'] = user.email

        return token
    
class MyTokenObtainPairView(TokenObtainPairView):
    serializer_class = MyTokenObtainPairSerializer
    
    
# Listing the user and password entry points for token generation
class ListViewAPI(APIView):

    permission_classes = [permissions.AllowAny] #AllowAny
    def get(self, request):
        routes = [
            '/api/token',
            '/api/token/refresh'
            ]
        return Response(routes)
    
    
class APILogoutView(APIView):
    permission_classes = [permissions.AllowAny] 

    def post(self, request, *args, **kwargs):
        if self.request.data.get('all'):
            token: OutstandingToken
            for token in OutstandingToken.objects.filter(user=request.user):
                _, _ = BlacklistedToken.objects.get_or_create(token=token)
            return Response({"status": "OK, goodbye, all refresh tokens blacklisted"})
        refresh_token = self.request.data.get('refresh_token')
        token = RefreshToken(token=refresh_token)
        token.blacklist()
        return Response({"status": "OK, goodbye"})
    
    
class LoginView(APIView):
    
    permission_classes = [permissions.AllowAny]
    
    def post(self, request):
        try:
            email = request.data.get('email')
            password = request.data.get('password')
            is_auth = authenticate(email=email, password=password)
            if is_auth is None:
                return Response(data={"message": "Email or Password is incorrect"}, status=status.HTTP_404_NOT_FOUND)
            refresh_token = RefreshToken.for_user(user=is_auth)
            return Response(data={
                'refresh': str(refresh_token),
                'access': str(refresh_token.access_token),
                }, 
                            status=status.HTTP_200_OK)
        except Exception as e:
            return Response(status=status.HTTP_400_BAD_REQUEST)



class SignupView(APIView):
    
    permission_classes = [permissions.AllowAny]
    
    def post(self, request):
        try:
            email = request.data.get('email')
            first_name = request.data.get('first_name')
            last_name = request.data.get('last_name')
            password = request.data.get('password')
            is_email_exits = CustomUser.objects.filter(email=email)
            if is_email_exits.exists():
                return Response(data={"message": "Email already exits"}, status=400)
            user = CustomUser(email=email, first_name=first_name, last_name=last_name)
            user.set_password(password)
            user.save()
            return Response(status=status.HTTP_200_OK)
        except Exception as e:
            return Response(status=status.HTTP_400_BAD_REQUEST)


             
               
# # Create your School data
class SchoolListView(APIView):
    
    permission_classes = [permissions.IsAuthenticated]
    
    def get(self, request, *args, **kwargs):
        schoolData = School.objects.filter(user = request.user.id)
        serializer = SchoolSerializer(schoolData, many=True)
        return Response(serializer.data, status=status.HTTP_200_OK)
    
    
    def post(self, request, *args, **kwargs):
        
        data = {
            'name': request.data.get('name'),
            'address': request.data.get('address'),
            'board_type': request.data.get('board_type'),
            'user': request.user.id
            }
        serializer = SchoolSerializer(data=data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status = status.HTTP_201_CREATED)
        
        return Response(serializer.errors, status = status.HTTP_400_BAD_REQUEST)
    

    
    
# # Create your School data
class StudentListView(APIView):
    
    permission_classes = [permissions.AllowAny]
    
    def get(self, request, *args, **kwargs):
        studentData = Student.objects.filter(user = request.user.id)
        serializer = StudentSerializer(studentData, many=True)
        return Response(serializer.data, status=status.HTTP_200_OK)
    
    
    def post(self, request, *args, **kwargs):
        
        data = {
            'name': request.data.get('name'),
            'roll_num': request.data.get('roll_num'),
            'class_name': request.data.get('class_name'),
            'parent_contact': request.data.get('parent_contact'),
            'address': request.data.get('address'),
            'school': request.data.get('school'),
            'user': request.user.id,
            }
        serializer = StudentSerializer(data=data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status = status.HTTP_201_CREATED)
        
        return Response(serializer.errors, status = status.HTTP_400_BAD_REQUEST)

